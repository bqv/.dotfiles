#!/bin/sh

if [[ $EUID -ne 0 ]]; then
    exec sudo $0
fi

CALLER=$(basename $0)

# destinations you don't want routed through Tor
NON_TOR="192.168.1.0/24 192.168.0.0/24"

# the UID Tor runs as
TOR_UID="43" #tor

# the UIDs Tor should skip
SKIP_UID="113 703" #rot, ???

# Tor's TransPort
TRANS_PORT="9040"

flushtables()
{
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t nat -X
    iptables -t mangle -F
    iptables -t mangle -X
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/10 -j REDIRECT --to-ports $TRANS_PORT    ## If it's going to one, then just quit
}

tor_on()
{
    flushtables
    iptables -F                                                                             # Flush general
    iptables -t nat -F                                                                      # Flush nat
                                                                                            # Of new connection packets
    for SKUID in $SKIP_UID $TOR_UID; do                                                     # For all these ipranges
        #iptables -t nat -A OUTPUT -m owner --uid-owner $SKUID -j RETURN                    # If it's owned by tor, quit meddling
        iptables -t nat -A OUTPUT -m owner --uid-owner $SKUID -j ACCEPT                     # If it's owned by tor, quit meddling
    done                                                                                    # Done
    iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 9053                 # If it's an outgoing UDP-53, fling it back to localhost
    for NET in $NON_TOR 127.0.0.0/9 127.128.0.0/10; do                                      # For all these ipranges
     iptables -t nat -A OUTPUT -d $NET -j RETURN                                            ## If it's going to one, then just quit
    done                                                                                    # Done
    iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TRANS_PORT               # Redirect any other packet to Tor
                                                                                            # Of all packets
    #iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT                 # If it's already connected, let it be
    for NET in $NON_TOR 127.0.0.0/8; do                                                     # For all these ipranges
     iptables -A OUTPUT -d $NET -j ACCEPT                                                   ## If it's going to one, then let it be
    done                                                                                    # Done
    #iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT                              # If it's owned by tor, it may pass
    for SKUID in $SKIP_UID $TOR_UID; do                                                     # For all these ipranges
        iptables -A OUTPUT -m owner --uid-owner $SKUID -j ACCEPT                            # If it's owned by tor, it may pass
    done                                                                                    # Done
    iptables -A OUTPUT -j REJECT                                                            # Otherwise ignore it

    echo ON
}

tor_off()
{
    flushtables
    echo OFF
    rm -f /tmp/.tortables.lock && exit
}

if [[ "$CALLER" == "tor_on" ]]; then
    tor_on; exit
elif [[ "$CALLER" == "tor_off" ]]; then
    tor_off; exit
else
    flushtables;
    #rm -f /tmp/.tortables.lock && exit
fi

[[ -f /tmp/.tortables.lock ]] && tor_off
#else
echo filtering > /tmp/.tortables.lock && tor_on
