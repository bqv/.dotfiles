#lang racket

(require racket/tcp)

(define-values (in out) (tcp-connect "irc.awfulnet.org" 6667))

(define-syntax-rule (debug str ...)
                    (let ()
                      (displayln (string-append "-> " str ...))
                      (displayln (string-append str ...) out)))

(define connected #t)
(define welcome #f)
(define autojoin "#bots")

(define gayness 0)
(define triggers '(("penis" . +10)
                   ("vagina" . -10)
                   ("fabulous" . +20)))

(debug "USER bot * * *")
(debug "NICK gay_lisp")
(flush-output out)

(let loop ()
  (when connected
    (let ([line (read-line in)])
      (when (eof-object? line)
        (displayln "Server hungup...")
        (set! connected #f))
      (displayln line)

      (when (not (equal? line ""))
        (let ([line (string-split line)])
          (when (equal? (car line) "PING")
            (debug "PONG " (cadr line)))
          (when (not welcome)
            (when (equal? (cadr line) "001")
              (set! welcome #t)
              (debug "JOIN " autojoin)))

          (when (equal? (cadr line) "PRIVMSG")
            (let ([text (string-downcase (substring (string-join (cdddr line)) 1))])
              (displayln (string-append "<- " text ))
              (let ([query (regexp-match #rx" *@rating +(.+) *" text)])
                (when query
                  (set! query (string-join (cdr query)))
                  (debug "PRIVMSG " (caddr line) " :" query ": " (number->string (cdr (assoc triggers query)))))))))

        (flush-output out)))
    (loop)))
